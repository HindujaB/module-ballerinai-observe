apply plugin: 'java'

repositories {
    mavenLocal()
    maven {
        url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
    }

    maven {
        url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
    }

    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }

    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/*'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

configurations {
    jbalTools
    testUtils {
        transitive false
    }
}

dependencies {
    implementation group: 'org.ballerinalang', name: 'ballerina-core', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    testUtils implementation(group: 'org.ballerinalang', name: 'ballerina-test-utils', version:
            "${ballerinaLangVersion}")
    testImplementation group: 'org.ballerinalang', name: 'ballerina-metrics-extension', version: "${ballerinaLangVersion}"
    implementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
}

//def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def ballerinaDist = "build/target/extracted-distributions"



task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File(ballerinaDist, "jballerina-tools-zip")
    }
}

task copyObserveStdlib {
    dependsOn(":testobserve-ballerina:build")
    dependsOn(unpackJballerinaTools)
    doLast {
        /* Copy Observe module */
        copy {
            from "$project.rootDir/integration-test-utils/ballerina/build/cache_parent/bala"
            into "${ballerinaDist}/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/repo/bala"
        }
    }
}

task createServerZip(type: Zip) {
    dependsOn copyObserveStdlib

    archiveFileName = "jballerina-tools-${ballerinaLangVersion}.zip"
    destinationDirectory = file("${buildDir}/repacked-distributions")
    from "${project.buildDir}/target/extracted-distributions/jballerina-tools-zip/"
}

test {
    dependsOn createServerZip
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
    systemProperty 'enableJBallerinaTests', 'true'
    systemProperty 'basedir', "$buildDir"
    systemProperty 'libdir', "$buildDir"
    systemProperty 'server.zip', createServerZip.outputs.files.singleFile
    systemProperty 'jballerina.server.zip', createServerZip.outputs.files.singleFile
    systemProperty 'java.util.logging.config.file', "$buildDir/resources/test/logging.properties"
    systemProperty 'ballerina.agent.path', configurations.testUtils.asPath
    systemProperty 'ballerina.agent.port.start.value', 27000

    testLogging.showStandardStreams = true

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

